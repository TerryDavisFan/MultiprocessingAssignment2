
import java.util.Scanner;
import java.util.concurrent.Semaphore;

public class MinotaurBirthday {
	
	//minotaur puts out a sign
	//guest are responsible for marking when they have had a cupcake
	static int c;
	
	public static void main(String[] args) {
		//create a semaphore to represent a cupcake
		Semaphore cupcake = new Semaphore(1);
		
		//get number of guest
		System.out.print("How many guest: ");
		Scanner kb = new Scanner(System.in);
		int N = kb.nextInt();
		
		while(N < 1) {
			System.out.print("How many guest (IT SHOULD BE AT LEAST ONE): ");
			N = kb.nextInt();
		}
		
		//let the user decide how long it takes to eat a cupcake
		System.out.print("How long would a guest take to eat a cupcake: ");
		int t = kb.nextInt();
		while(t < 0)
		{
			System.out.print("How long would a guest take to eat a cupcake (IT SHOULD BE AT LEAST ZERO): ");
			t = kb.nextInt();
		}
		
		//array of guest
		Guest[] guests = new Guest[N];
		for(int i = 0; i < N; i++) {
			guests[i] = new Guest(i, cupcake, t);
		}
		
		//check if all guests have gone
		while(c < N) {
			//let a random guest into the maze
			int i = (int)(Math.random() * N);
			if(guests[i].getState() == Thread.State.NEW)
				guests[i].start();
			else
				guests[i].run();
		}
		
		//The minotaur now knows that all guests have gone
	}
	
	public static void inc() {
		c++;
	}
}

class Guest extends Thread {
	int i, t;
	Semaphore cupcake;
	boolean hasTold;
	
	
	
	//constructor
	public Guest(int i, Semaphore cupcake, int t) {
		this.i = i;
		this.t = t;
		this.cupcake = cupcake;
		hasTold = false;
	}
	
	//override
	public void run() {
		//if there was an actual maze to for the guest to solve
		//I would implement a backtracking solution here
		//There isn't so I ask that you imagine there is
		if(solve());
		
		//see if guest has access to the cupcake
		try {
			//guests is either taking an already present cupcake or requesting one after the previous guest has finished
			cupcake.acquire();
			
			//simulate time for guest to eat a cupcake
			sleep(t);
			
			System.out.println("Guest " + i + " has had a cupcake");
			
			//let the minotaur know guest has had a cupcake
			if(!hasTold) {
				hasTold = true;
				MinotaurBirthday.inc();
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		//leave an empty plate
		cupcake.release();
	}
	
	public boolean solve() {
		return true;
	}
}
